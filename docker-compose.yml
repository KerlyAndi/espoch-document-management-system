version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: espoch-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: espoch_docs
      MYSQL_USER: espoch_user
      MYSQL_PASSWORD: espoch_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - espoch-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # FastAPI Service
  fastapi:
    build:
      context: ./fastapi-service
      dockerfile: Dockerfile
    container_name: espoch-fastapi
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - HOST=0.0.0.0
    volumes:
      - ./backend/uploads:/app/uploads:ro
    networks:
      - espoch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Express.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: espoch-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=mysql
      - DB_USER=espoch_user
      - DB_PASS=espoch_password
      - DB_NAME=espoch_docs
      - JWT_SECRET=super_secure_jwt_secret_for_docker
      - FASTAPI_URL=http://fastapi:8001
      - UPLOAD_DIR=uploads
      - MAX_FILE_SIZE=10485760
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
      fastapi:
        condition: service_healthy
    networks:
      - espoch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: espoch-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE=http://localhost:5000/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - espoch-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: espoch-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./backend/uploads:/var/www/uploads
    depends_on:
      - frontend
      - backend
      - fastapi
    networks:
      - espoch-network

volumes:
  mysql_data:
    driver: local

networks:
  espoch-network:
    driver: bridge
